generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  username             String?
  email                String    @unique
  password             String
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  refreshToken         String?
  refreshTokenExpires  DateTime?
  roles                Role      @default(admin)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

enum Role {
  admin
  superadmin
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Template {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  templateId  Int
  template    Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Blog       Blog[]
}

model Blog {
  id               Int         @id @default(autoincrement())
  titleTag         String
  metaTag          String
  blogName         String
  blogDescription  String
  blogTitle        String
  titleDescription String
  slug             String
  status           Status      @default(DRAFT)
  blogImage        String
  subCategoryId    Int
  subCategory      SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  updatedAt        DateTime    @updatedAt
  createdAt        DateTime    @default(now())
  Sections         Sections[]
  Highlight        Highlight[]
}

model Sections {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  sectionImage String
  blogId       Int
  blog         Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Highlight {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String
  blogId            Int
  blog              Blog                @relation(fields: [blogId], references: [id], onDelete: Cascade)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  HighlightSections HighlightSections[]
}

model HighlightSections {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  highlightSectionImage String
  highlightId           Int
  highlight             Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivacyPolicy {
  id        Int      @id @default(autoincrement())
  html      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermsAndCondition {
  id        Int      @id @default(autoincrement())
  html      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
